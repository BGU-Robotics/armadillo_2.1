<?xml version="1.0" encoding="UTF-8"?>

<!-- armadillo2 top-level launch -->

<launch>
    
    <!--common settings-->
    <arg name="sim" default="false" doc="execute armadillo2 inside gazebo sim"/>
    <arg name="world_name" default="worlds/empty.world"/> 
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0.0"/>
    <arg name="Y" default="0.0" />
    <arg name="moveit" default="false"/>
    <arg name="softkinetic" default="false"/>
    <arg name="kinect" default="false"/>
    <arg name="lidar" default="false"/>
    <arg name="gmapping" default="false"/>
    <arg name="hector_slam" default="false"/>
    <arg name="amcl" default="false"/>
    <arg name="have_map" default="false" doc="set to true to use pre-saved map"/>
    <arg name="map" default="map.yaml" doc="pre-saved map path"/>
    <arg name="move_base" default="false"/>
    <arg name="twist_mux" default="true"/>
    <arg name="teleop" default="false" doc="allow armadillo2 joy teleop"/>
    <arg name="joy_dev" default="/dev/input/js0"/>
    <!--uncommon settings-->
    <arg name="center_pan_tilt" default="true" doc="centers head on startup"/>
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
  
    <!--center robot head on startup -->
    <group if="$(arg center_pan_tilt)" >
        
        <!-- load joystick listener node -->
        <node name="pan_tilt_center_node" output="screen" pkg="pan_tilt_mover" type="pan_tilt_mover_node">
            <param name="pan_angle" value="0" />
            <param name="tilt_angle" value="0" />
            <param name="timeout" value="5" />
            <param name="random" value="false" />
        </node>
        
    </group>
    
    
    <!--open lift_arm service to allow lifting arm from dead state-->
    <node name="lift_arm_node" pkg="lift_arm" type="lift_arm_node" respawn="false" output="screen" />
    
    <include file="$(find espeak_ros)/launch/espeak_ros.launch" />
    
    <group if="$(arg teleop)" >
        
        <!-- load joystick listener node -->
        <node pkg="joy" type="joy_node" name="joy_listener">
            <param name="dev" value="$(arg joy_dev)" />
            <param name="deadzone" value="0.05" />
            <param name="autorepeat_rate" value="20" />
        </node>
        
        <node pkg="armadillo2_teleop" type="armadillo2_teleop_node" name="armadillo2_teleop_node"/>
        
    </group>
    
    <group if="$(arg have_map)">
        <node name="map_server" pkg="map_server" type="map_server" args="$(arg map)" />
    </group>

    <!--if no one publish map-odom tf, load static tf-->
    <group unless="$(arg gmapping)">
        <group unless="$(arg hector_slam)">
            <group unless="$(arg amcl)">           
                <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="0 0 0 0 0 0 /map /odom 20" />
               
            </group>   
        </group>    
    </group>
    
    <!--load simulation stuff-->
    <group if="$(arg sim)">
        
         <env name="GAZEBO_MODEL_PATH" value="$(find robotican_common)/models:$(optenv GAZEBO_MODEL_PATH)"/>
         <param name="robot_description" command="$(find xacro)/xacro '$(find armadillo2_description)/urdf/armadillo2_gazebo.xacro' --inorder" />


        <include file="$(find armadillo2_control)/launch/armadillo2_gazebo_controllers.launch" />

	<include file="$(find gazebo_ros)/launch/empty_world.launch">	    
              <arg name="world_name" value="$(arg world_name)"/>
	      <arg name="gui" value="true"/>	     
	</include>

        <node name="armadillo2_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model armadillo2 -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg Y)" />
        
    </group>
    
    <!--load hardware stuff-->
    <group unless="$(arg sim)">
        
        <param name="robot_description" command="$(find xacro)/xacro '$(find armadillo2_description)/urdf/armadillo2.xacro' --inorder" />
        <include file="$(find armadillo2_hw)/launch/armadillo2_hw.launch" />
        
        <include file="$(find armadillo2_control)/launch/armadillo2_hw_controllers.launch" />
        
        <group if="$(arg softkinetic)">
            <include file="$(find softkinetic_camera)/launch/softkinetic_camera_ds325.launch" />
        </group>
    
        <group if="$(arg kinect)">
            <include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch" />
        </group>
                
        <group if="$(arg lidar)">
            <include file="$(find lidar_urg_node)/launch/lidar.launch" />
        </group>

    </group>
    
    <group if="$(arg twist_mux)">
        <include file="$(find ros_twist_mux)/launch/twist_mux.launch" />
    </group>
    
   
    
    <group if="$(arg gmapping)">
        <include file="$(find armadillo2_navigation)/launch/gmapping.launch" />
    </group>
    
    <group if="$(arg hector_slam)">
        <include file="$(find armadillo2_navigation)/launch/hector_slam.launch" />
    </group>
    
    <group if="$(arg amcl)">
        <include file="$(find armadillo2_navigation)/launch/amcl.launch" >
            <arg name="x" value="$(arg x)"/>
            <arg name="y" value="$(arg y)"/>
            <arg name="Y" value="$(arg Y)"/>
	</include>
    </group>
    
    <group if="$(arg moveit)">
        <include file="$(find armadillo2_moveit_config)/launch/move_group.launch" />
    </group>
    
    
    <group if="$(arg move_base)">
        <include file="$(find armadillo2_navigation)/launch/move_base.launch" />
        <rosparam file="$(find armadillo2_navigation)/config/move_base_params.yaml" command="load" ns="move_base"/>
        <rosparam file="$(find armadillo2_navigation)/config/costmap_common_params.yaml" command="load" ns="move_base/global_costmap" />
        <rosparam file="$(find armadillo2_navigation)/config/costmap_common_params.yaml" command="load" ns="move_base/local_costmap" />
        <rosparam file="$(find armadillo2_navigation)/config/local_costmap_params.yaml" command="load" ns="move_base/local_costmap" />
        <rosparam file="$(find armadillo2_navigation)/config/global_costmap_params.yaml" command="load" ns="move_base/global_costmap"/>
    </group>
    
</launch>
